// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  ClearMcpRequestLogsData,
  ClearMcpRequestLogsResponses,
  CompleteGenericOAuthData,
  CompleteGenericOAuthErrors,
  CompleteGenericOAuthResponses,
  ConfigureCloudProviderData,
  ConfigureCloudProviderResponses,
  ConnectExternalMcpClientData,
  ConnectExternalMcpClientResponses,
  CreateChatData,
  CreateChatResponses,
  DeleteAllMemoriesData,
  DeleteAllMemoriesResponses,
  DeleteChatData,
  DeleteChatErrors,
  DeleteChatMessageData,
  DeleteChatMessageErrors,
  DeleteChatMessageResponses,
  DeleteChatResponses,
  DeleteCloudProviderData,
  DeleteCloudProviderResponses,
  DeleteMemoryData,
  DeleteMemoryResponses,
  DeselectAllChatToolsData,
  DeselectAllChatToolsErrors,
  DeselectAllChatToolsResponses,
  DeselectChatToolsData,
  DeselectChatToolsErrors,
  DeselectChatToolsResponses,
  DisconnectExternalMcpClientData,
  DisconnectExternalMcpClientResponses,
  GetAllMemoriesData,
  GetAllMemoriesResponses,
  GetApiSystemBackendLogsData,
  GetApiSystemBackendLogsResponses,
  GetAvailableCloudProvidersData,
  GetAvailableCloudProvidersResponses,
  GetAvailableToolsData,
  GetAvailableToolsResponses,
  GetChatAvailableToolsData,
  GetChatAvailableToolsResponses,
  GetChatByIdData,
  GetChatByIdErrors,
  GetChatByIdResponses,
  GetChatSelectedToolsData,
  GetChatSelectedToolsErrors,
  GetChatSelectedToolsResponses,
  GetChatsData,
  GetChatsResponses,
  GetCloudProviderModelsData,
  GetCloudProviderModelsResponses,
  GetConnectedExternalMcpClientsData,
  GetConnectedExternalMcpClientsResponses,
  GetMcpRequestLogByIdData,
  GetMcpRequestLogByIdErrors,
  GetMcpRequestLogByIdResponses,
  GetMcpRequestLogStatsData,
  GetMcpRequestLogStatsResponses,
  GetMcpRequestLogsData,
  GetMcpRequestLogsResponses,
  GetMcpServerLogsData,
  GetMcpServerLogsErrors,
  GetMcpServerLogsResponses,
  GetMcpServersData,
  GetMcpServersResponses,
  GetMemoryByNameData,
  GetMemoryByNameResponses,
  GetMemoryData,
  GetMemoryResponses,
  GetOllamaRequiredModelsStatusData,
  GetOllamaRequiredModelsStatusResponses,
  GetSupportedExternalMcpClientsData,
  GetSupportedExternalMcpClientsResponses,
  GetUserData,
  GetUserResponses,
  InstallMcpServerData,
  InstallMcpServerErrors,
  InstallMcpServerResponses,
  InstallMcpServerWithOauthData,
  InstallMcpServerWithOauthErrors,
  InstallMcpServerWithOauthResponses,
  PostApiOllamaPullData,
  PostApiOllamaPullErrors,
  PostApiOllamaPullResponses,
  ResetSandboxData,
  ResetSandboxErrors,
  ResetSandboxResponses,
  RestartSandboxData,
  RestartSandboxErrors,
  RestartSandboxResponses,
  SelectAllChatToolsData,
  SelectAllChatToolsErrors,
  SelectAllChatToolsResponses,
  SelectChatToolsData,
  SelectChatToolsErrors,
  SelectChatToolsResponses,
  SetMemoryData,
  SetMemoryErrors,
  SetMemoryResponses,
  StartGenericOAuthData,
  StartGenericOAuthErrors,
  StartGenericOAuthResponses,
  StoreOAuthCodeData,
  StoreOAuthCodeErrors,
  StoreOAuthCodeResponses,
  UninstallMcpServerData,
  UninstallMcpServerResponses,
  UpdateChatData,
  UpdateChatErrors,
  UpdateChatMessageData,
  UpdateChatMessageErrors,
  UpdateChatMessageResponses,
  UpdateChatResponses,
  UpdateMemoryData,
  UpdateMemoryErrors,
  UpdateMemoryResponses,
  UpdateUserData,
  UpdateUserResponses,
} from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Store OAuth authorization code from deep link callback (internal API)
 */
export const storeOAuthCode = <ThrowOnError extends boolean = false>(
  options: Options<StoreOAuthCodeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<StoreOAuthCodeResponses, StoreOAuthCodeErrors, ThrowOnError>({
    url: '/api/oauth/store-code',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all chats
 */
export const getChats = <ThrowOnError extends boolean = false>(options?: Options<GetChatsData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetChatsResponses, unknown, ThrowOnError>({
    url: '/api/chat',
    ...options,
  });
};

/**
 * Create new chat
 */
export const createChat = <ThrowOnError extends boolean = false>(options?: Options<CreateChatData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<CreateChatResponses, unknown, ThrowOnError>({
    url: '/api/chat',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Delete chat
 */
export const deleteChat = <ThrowOnError extends boolean = false>(options: Options<DeleteChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).delete<DeleteChatResponses, DeleteChatErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
  });
};

/**
 * Get single chat with messages
 */
export const getChatById = <ThrowOnError extends boolean = false>(options: Options<GetChatByIdData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).get<GetChatByIdResponses, GetChatByIdErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
  });
};

/**
 * Update chat
 */
export const updateChat = <ThrowOnError extends boolean = false>(options: Options<UpdateChatData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).patch<UpdateChatResponses, UpdateChatErrors, ThrowOnError>({
    url: '/api/chat/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get selected tools for a specific chat
 */
export const getChatSelectedTools = <ThrowOnError extends boolean = false>(
  options: Options<GetChatSelectedToolsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetChatSelectedToolsResponses, GetChatSelectedToolsErrors, ThrowOnError>(
    {
      url: '/api/chat/{id}/tools',
      ...options,
    }
  );
};

/**
 * Add tools to chat selection
 */
export const selectChatTools = <ThrowOnError extends boolean = false>(
  options: Options<SelectChatToolsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<SelectChatToolsResponses, SelectChatToolsErrors, ThrowOnError>({
    url: '/api/chat/{id}/tools/select',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove tools from chat selection
 */
export const deselectChatTools = <ThrowOnError extends boolean = false>(
  options: Options<DeselectChatToolsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<DeselectChatToolsResponses, DeselectChatToolsErrors, ThrowOnError>({
    url: '/api/chat/{id}/tools/deselect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Select all available tools for this chat
 */
export const selectAllChatTools = <ThrowOnError extends boolean = false>(
  options: Options<SelectAllChatToolsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<SelectAllChatToolsResponses, SelectAllChatToolsErrors, ThrowOnError>({
    url: '/api/chat/{id}/tools/select-all',
    ...options,
  });
};

/**
 * Clear all tool selections for this chat
 */
export const deselectAllChatTools = <ThrowOnError extends boolean = false>(
  options: Options<DeselectAllChatToolsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DeselectAllChatToolsResponses,
    DeselectAllChatToolsErrors,
    ThrowOnError
  >({
    url: '/api/chat/{id}/tools/deselect-all',
    ...options,
  });
};

/**
 * List all tools available for selection
 */
export const getChatAvailableTools = <ThrowOnError extends boolean = false>(
  options: Options<GetChatAvailableToolsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetChatAvailableToolsResponses, unknown, ThrowOnError>({
    url: '/api/chat/{id}/tools/available',
    ...options,
  });
};

/**
 * Delete a specific message
 */
export const deleteChatMessage = <ThrowOnError extends boolean = false>(
  options: Options<DeleteChatMessageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DeleteChatMessageResponses, DeleteChatMessageErrors, ThrowOnError>({
    url: '/api/message/{id}',
    ...options,
  });
};

/**
 * Update a specific message
 */
export const updateChatMessage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateChatMessageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<UpdateChatMessageResponses, UpdateChatMessageErrors, ThrowOnError>({
    url: '/api/message/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get all available cloud providers with configuration status
 */
export const getAvailableCloudProviders = <ThrowOnError extends boolean = false>(
  options?: Options<GetAvailableCloudProvidersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetAvailableCloudProvidersResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers/available',
    ...options,
  });
};

/**
 * Configure a cloud provider with API key
 */
export const configureCloudProvider = <ThrowOnError extends boolean = false>(
  options: Options<ConfigureCloudProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ConfigureCloudProviderResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Remove cloud provider configuration
 */
export const deleteCloudProvider = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCloudProviderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DeleteCloudProviderResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers/{type}',
    ...options,
  });
};

/**
 * Get all available models from configured providers
 */
export const getCloudProviderModels = <ThrowOnError extends boolean = false>(
  options?: Options<GetCloudProviderModelsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetCloudProviderModelsResponses, unknown, ThrowOnError>({
    url: '/api/cloud-providers/models',
    ...options,
  });
};

/**
 * Get all connected external MCP clients
 */
export const getConnectedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetConnectedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetConnectedExternalMcpClientsResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client',
    ...options,
  });
};

/**
 * Get supported external MCP client names
 */
export const getSupportedExternalMcpClients = <ThrowOnError extends boolean = false>(
  options?: Options<GetSupportedExternalMcpClientsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetSupportedExternalMcpClientsResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/supported',
    ...options,
  });
};

/**
 * Connect an external MCP client
 */
export const connectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options: Options<ConnectExternalMcpClientData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<ConnectExternalMcpClientResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/connect',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Disconnect an external MCP client
 */
export const disconnectExternalMcpClient = <ThrowOnError extends boolean = false>(
  options: Options<DisconnectExternalMcpClientData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DisconnectExternalMcpClientResponses, unknown, ThrowOnError>({
    url: '/api/external_mcp_client/{clientName}/disconnect',
    ...options,
  });
};

/**
 * Start generic OAuth flow for MCP server installation
 */
export const startGenericOAuth = <ThrowOnError extends boolean = false>(
  options: Options<StartGenericOAuthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<StartGenericOAuthResponses, StartGenericOAuthErrors, ThrowOnError>({
    url: '/api/mcp_server/start_oauth',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Complete generic OAuth flow with authorization code
 */
export const completeGenericOAuth = <ThrowOnError extends boolean = false>(
  options: Options<CompleteGenericOAuthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CompleteGenericOAuthResponses,
    CompleteGenericOAuthErrors,
    ThrowOnError
  >({
    url: '/api/mcp_server/complete_oauth',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Clear MCP request logs
 */
export const clearMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options: Options<ClearMcpRequestLogsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<ClearMcpRequestLogsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get MCP request logs with filtering and pagination
 */
export const getMcpRequestLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpRequestLogsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log',
    ...options,
  });
};

/**
 * Get a single MCP request log by ID
 */
export const getMcpRequestLogById = <ThrowOnError extends boolean = false>(
  options: Options<GetMcpRequestLogByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetMcpRequestLogByIdResponses, GetMcpRequestLogByIdErrors, ThrowOnError>(
    {
      url: '/api/mcp_request_log/{id}',
      ...options,
    }
  );
};

/**
 * Get MCP request log statistics
 */
export const getMcpRequestLogStats = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpRequestLogStatsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpRequestLogStatsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_request_log/stats',
    ...options,
  });
};

/**
 * Get all installed MCP servers
 */
export const getMcpServers = <ThrowOnError extends boolean = false>(
  options?: Options<GetMcpServersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetMcpServersResponses, unknown, ThrowOnError>({
    url: '/api/mcp_server',
    ...options,
  });
};

/**
 * Install an MCP server. Either from the catalog, or a customer server
 */
export const installMcpServer = <ThrowOnError extends boolean = false>(
  options?: Options<InstallMcpServerData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<InstallMcpServerResponses, InstallMcpServerErrors, ThrowOnError>({
    url: '/api/mcp_server/install',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

/**
 * Uninstall MCP server
 */
export const uninstallMcpServer = <ThrowOnError extends boolean = false>(
  options: Options<UninstallMcpServerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<UninstallMcpServerResponses, unknown, ThrowOnError>({
    url: '/api/mcp_server/{id}',
    ...options,
  });
};

/**
 * Get logs for a specific MCP server container
 */
export const getMcpServerLogs = <ThrowOnError extends boolean = false>(
  options: Options<GetMcpServerLogsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetMcpServerLogsResponses, GetMcpServerLogsErrors, ThrowOnError>({
    url: '/mcp_proxy/{id}/logs',
    ...options,
  });
};

/**
 * Get all available tools from connected MCP servers
 */
export const getAvailableTools = <ThrowOnError extends boolean = false>(
  options?: Options<GetAvailableToolsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetAvailableToolsResponses, unknown, ThrowOnError>({
    url: '/api/mcp_server/tools',
    ...options,
  });
};

/**
 * Install MCP server with OAuth authentication
 */
export const installMcpServerWithOauth = <ThrowOnError extends boolean = false>(
  options: Options<InstallMcpServerWithOauthData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    InstallMcpServerWithOauthResponses,
    InstallMcpServerWithOauthErrors,
    ThrowOnError
  >({
    url: '/api/mcp_server/oauth_install',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Delete all memory entries for the current user
 */
export const deleteAllMemories = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteAllMemoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).delete<DeleteAllMemoriesResponses, unknown, ThrowOnError>({
    url: '/api/memories',
    ...options,
  });
};

/**
 * Get all memory entries for the current user
 */
export const getAllMemories = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllMemoriesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetAllMemoriesResponses, unknown, ThrowOnError>({
    url: '/api/memories',
    ...options,
  });
};

/**
 * Delete a specific memory entry by name
 */
export const deleteMemory = <ThrowOnError extends boolean = false>(
  options: Options<DeleteMemoryData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<DeleteMemoryResponses, unknown, ThrowOnError>({
    url: '/api/memories/{name}',
    ...options,
  });
};

/**
 * Get a specific memory entry by name
 */
export const getMemoryByName = <ThrowOnError extends boolean = false>(
  options: Options<GetMemoryByNameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<GetMemoryByNameResponses, unknown, ThrowOnError>({
    url: '/api/memories/{name}',
    ...options,
  });
};

/**
 * Create or update a memory entry
 */
export const setMemory = <ThrowOnError extends boolean = false>(options: Options<SetMemoryData, ThrowOnError>) => {
  return (options.client ?? _heyApiClient).put<SetMemoryResponses, SetMemoryErrors, ThrowOnError>({
    url: '/api/memories/{name}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get the current user memory (legacy format)
 */
export const getMemory = <ThrowOnError extends boolean = false>(options?: Options<GetMemoryData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetMemoryResponses, unknown, ThrowOnError>({
    url: '/api/memory',
    ...options,
  });
};

/**
 * Update the current user memory (legacy format)
 */
export const updateMemory = <ThrowOnError extends boolean = false>(
  options?: Options<UpdateMemoryData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<UpdateMemoryResponses, UpdateMemoryErrors, ThrowOnError>({
    url: '/api/memory',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};

export const postApiOllamaPull = <ThrowOnError extends boolean = false>(
  options: Options<PostApiOllamaPullData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<PostApiOllamaPullResponses, PostApiOllamaPullErrors, ThrowOnError>({
    url: '/api/ollama/pull',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  });
};

/**
 * Get the status of all Ollama required models
 */
export const getOllamaRequiredModelsStatus = <ThrowOnError extends boolean = false>(
  options?: Options<GetOllamaRequiredModelsStatusData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetOllamaRequiredModelsStatusResponses, unknown, ThrowOnError>({
    url: '/api/ollama/required-models',
    ...options,
  });
};

/**
 * Restart the Archestra MCP Sandbox (podman machine + all MCP servers)
 */
export const restartSandbox = <ThrowOnError extends boolean = false>(
  options?: Options<RestartSandboxData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<RestartSandboxResponses, RestartSandboxErrors, ThrowOnError>({
    url: '/api/sandbox/restart',
    ...options,
  });
};

/**
 * Clean/purge all data (uninstall all MCP servers + reset podman machine)
 */
export const resetSandbox = <ThrowOnError extends boolean = false>(
  options?: Options<ResetSandboxData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<ResetSandboxResponses, ResetSandboxErrors, ThrowOnError>({
    url: '/api/sandbox/reset',
    ...options,
  });
};

export const getApiSystemBackendLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiSystemBackendLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetApiSystemBackendLogsResponses, unknown, ThrowOnError>({
    url: '/api/system/backend-logs',
    ...options,
  });
};

/**
 * Get the current user
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetUserResponses, unknown, ThrowOnError>({
    url: '/api/user',
    ...options,
  });
};

/**
 * Update user settings
 */
export const updateUser = <ThrowOnError extends boolean = false>(options?: Options<UpdateUserData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).patch<UpdateUserResponses, unknown, ThrowOnError>({
    url: '/api/user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  });
};
