{
  "openapi": "3.0.0",
  "info": {
    "title": "Archestra API",
    "version": "0.0.1"
  },
  "components": {
    "schemas": {
      "OAuthTokensInput": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "number"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        },
        "required": ["access_token"],
        "additionalProperties": {}
      },
      "OAuthClientInformationInput": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          }
        },
        "required": ["client_id"],
        "additionalProperties": {}
      },
      "AuthorizationServerMetadataInput": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "revocation_endpoint": {
            "type": "string"
          },
          "scopes_supported": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {}
      },
      "OAuthProtectedResourceMetadataInput": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string"
          },
          "scopes_supported": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {}
      },
      "OAuthServerConfigInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "server_url": {
            "type": "string",
            "format": "uri"
          },
          "auth_server_url": {
            "type": "string",
            "format": "uri"
          },
          "resource_metadata_url": {
            "type": "string",
            "format": "uri"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "well_known_url": {
            "type": "string",
            "format": "uri"
          },
          "default_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supports_resource_metadata": {
            "type": "boolean"
          },
          "generic_oauth": {
            "type": "boolean"
          },
          "token_endpoint": {
            "type": "string",
            "format": "uri"
          },
          "access_token_env_var": {
            "type": "string"
          },
          "requires_proxy": {
            "type": "boolean"
          },
          "provider_name": {
            "type": "string"
          },
          "browser_auth": {
            "type": "boolean"
          },
          "streamable_http_url": {
            "type": "string",
            "format": "uri"
          },
          "streamable_http_port": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "server_url",
          "client_id",
          "redirect_uris",
          "scopes",
          "default_scopes",
          "supports_resource_metadata"
        ]
      },
      "ToolAnalysisResultInput": {
        "type": "object",
        "properties": {
          "is_read": {
            "type": "boolean"
          },
          "is_write": {
            "type": "boolean"
          }
        },
        "required": ["is_read", "is_write"]
      },
      "ToolInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "mcp_server_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "input_schema": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "array",
                    "items": {}
                  }
                ]
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "is_read": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "is_write": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "analyzed_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "mcp_server_id",
          "name",
          "description",
          "input_schema",
          "is_read",
          "is_write",
          "analyzed_at",
          "created_at",
          "updated_at"
        ]
      },
      "SandboxStatusSummaryInput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["not_installed", "initializing", "running", "error", "stopping", "stopped"]
          },
          "runtime": {
            "type": "object",
            "properties": {
              "startupPercentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "startupMessage": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "startupError": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "machineStartupPercentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "machineStartupMessage": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "machineStartupError": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "pullPercentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "pullMessage": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "pullError": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              }
            },
            "required": ["startupPercentage", "startupMessage", "startupError"]
          },
          "mcpServers": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "container": {
                  "$ref": "#/components/schemas/PodmanContainerStatusSummaryInput"
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableToolInput"
                  }
                }
              },
              "required": ["container", "tools"]
            }
          },
          "allAvailableTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableToolInput"
            }
          }
        },
        "required": ["status", "runtime", "mcpServers"]
      },
      "PodmanContainerStatusSummaryInput": {
        "type": "object",
        "properties": {
          "startupPercentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "state": {
            "type": "string",
            "enum": [
              "not_created",
              "created",
              "initializing",
              "running",
              "error",
              "restarting",
              "stopping",
              "stopped",
              "exited"
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          }
        },
        "required": ["startupPercentage", "state", "message", "error"]
      },
      "OllamaModelDownloadProgressInput": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["downloading", "verifying", "completed", "error"]
          },
          "progress": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["model", "status", "progress", "message"]
      },
      "WebSocketMessageInput": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["chat-title-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "required": ["chatId", "title"]
              }
            },
            "required": ["type", "payload"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["chat-tools-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "number"
                  },
                  "selectedTools": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  }
                },
                "required": ["chatId", "selectedTools"]
              }
            },
            "required": ["type", "payload"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["sandbox-status-update"]
              },
              "payload": {
                "$ref": "#/components/schemas/SandboxStatusSummaryInput"
              }
            },
            "required": ["type", "payload"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["ollama-model-download-progress"]
              },
              "payload": {
                "$ref": "#/components/schemas/OllamaModelDownloadProgressInput"
              }
            },
            "required": ["type", "payload"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["memory-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "memories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        }
                      },
                      "required": ["id", "name", "value", "createdAt", "updatedAt"]
                    }
                  }
                },
                "required": ["memories"]
              }
            },
            "required": ["type", "payload"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["tools-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "mcpServerId": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": ["mcpServerId", "message"]
              }
            },
            "required": ["type", "payload"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["tool-analysis-progress"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "mcpServerId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["started", "analyzing", "completed", "error"]
                  },
                  "progress": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "totalTools": {
                    "type": "number"
                  },
                  "analyzedTools": {
                    "type": "number"
                  },
                  "currentTool": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "required": ["status", "message"]
              }
            },
            "required": ["type", "payload"]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["chat-token-usage-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "number"
                  },
                  "totalPromptTokens": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "totalCompletionTokens": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "totalTokens": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "lastModel": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "lastContextWindow": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "contextUsagePercent": {
                    "type": "number"
                  }
                },
                "required": [
                  "chatId",
                  "totalPromptTokens",
                  "totalCompletionTokens",
                  "totalTokens",
                  "lastModel",
                  "lastContextWindow",
                  "contextUsagePercent"
                ]
              }
            },
            "required": ["type", "payload"]
          }
        ]
      },
      "ChatWithMessagesInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "sessionId": {
            "type": "string"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "selectedTools": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "array",
                    "items": {}
                  }
                ]
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "totalPromptTokens": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "totalCompletionTokens": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "totalTokens": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "lastModel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "lastContextWindow": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "chatId": {
                  "type": "integer",
                  "minimum": -9007199254740991,
                  "maximum": 9007199254740991
                },
                "role": {
                  "type": "string",
                  "enum": ["user", "assistant", "system"]
                },
                "content": {},
                "createdAt": {
                  "type": "string"
                }
              },
              "required": ["id", "chatId", "role", "content", "createdAt"]
            }
          }
        },
        "required": [
          "id",
          "sessionId",
          "title",
          "selectedTools",
          "totalPromptTokens",
          "totalCompletionTokens",
          "totalTokens",
          "lastModel",
          "lastContextWindow",
          "createdAt",
          "updatedAt",
          "messages"
        ]
      },
      "CloudProviderWithConfigInput": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SupportedCloudProvidersInput"
          },
          "name": {
            "type": "string"
          },
          "apiKeyUrl": {
            "type": "string",
            "format": "uri"
          },
          "apiKeyPlaceholder": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string",
            "format": "uri"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "configured": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "validatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          }
        },
        "required": [
          "type",
          "name",
          "apiKeyUrl",
          "apiKeyPlaceholder",
          "baseUrl",
          "models",
          "configured",
          "enabled",
          "validatedAt"
        ]
      },
      "SupportedCloudProvidersInput": {
        "type": "string",
        "enum": ["anthropic", "openai", "deepseek", "gemini"]
      },
      "SupportedCloudProviderModelInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/SupportedCloudProvidersInput"
          }
        },
        "required": ["id", "provider"]
      },
      "ExternalMcpClientInput": {
        "type": "object",
        "properties": {
          "clientName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": ["clientName", "createdAt"]
      },
      "ExternalMcpClientNameInput": {
        "type": "string",
        "enum": ["claude", "cursor", "vscode"]
      },
      "McpRequestLogInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "requestId": {
            "type": "string"
          },
          "sessionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "mcpSessionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "serverName": {
            "type": "string"
          },
          "clientInfo": {
            "type": "object",
            "properties": {
              "userAgent": {
                "type": "string"
              },
              "clientName": {
                "type": "string"
              },
              "clientVersion": {
                "type": "string"
              },
              "clientPlatform": {
                "type": "string"
              }
            }
          },
          "method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "requestHeaders": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              }
            ]
          },
          "requestBody": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "responseBody": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "responseHeaders": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              }
            ]
          },
          "statusCode": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "errorMessage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "durationMs": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "requestId",
          "sessionId",
          "mcpSessionId",
          "serverName",
          "clientInfo",
          "method",
          "requestHeaders",
          "requestBody",
          "responseBody",
          "responseHeaders",
          "statusCode",
          "errorMessage",
          "durationMs",
          "timestamp"
        ]
      },
      "McpRequestLogStatsInput": {
        "type": "object",
        "properties": {
          "totalRequests": {
            "type": "number"
          },
          "successCount": {
            "type": "number"
          },
          "errorCount": {
            "type": "number"
          },
          "avgDurationMs": {
            "type": "number"
          },
          "requestsPerServer": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        },
        "required": ["totalRequests", "successCount", "errorCount", "avgDurationMs", "requestsPerServer"]
      },
      "McpRequestLogFilterStatusInput": {
        "type": "string",
        "enum": ["HTTP 200", "HTTP 40x", "HTTP 50x"]
      },
      "McpServerConfigInput": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "inject_file": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {}
      },
      "McpServerUserConfigValuesInput": {
        "type": "object",
        "additionalProperties": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      },
      "McpServerInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serverConfig": {
            "$ref": "#/components/schemas/McpServerConfigInput"
          },
          "userConfigValues": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/McpServerUserConfigValuesInput"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthTokens": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OAuthTokensInput"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthClientInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OAuthClientInformationInput"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthServerMetadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizationServerMetadataInput"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthResourceMetadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OAuthProtectedResourceMetadataInput"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthConfig": {
            "anyOf": [
              {},
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "status": {
            "type": "string",
            "enum": ["installing", "oauth_pending", "installed", "failed"]
          },
          "serverType": {
            "type": "string",
            "enum": ["local", "remote"]
          },
          "remoteUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "serverConfig",
          "userConfigValues",
          "oauthTokens",
          "oauthClientInfo",
          "oauthServerMetadata",
          "oauthResourceMetadata",
          "oauthConfig",
          "status",
          "serverType",
          "remoteUrl",
          "createdAt"
        ]
      },
      "McpServerInstallInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "pattern": "^[A-Za-z0-9-\\s]{1,63}$"
          },
          "serverConfig": {
            "$ref": "#/components/schemas/McpServerConfigInput"
          },
          "userConfigValues": {
            "$ref": "#/components/schemas/McpServerUserConfigValuesInput"
          },
          "oauthConfig": {
            "$ref": "#/components/schemas/OAuthServerConfigInput"
          },
          "oauthTokens": {
            "$ref": "#/components/schemas/OAuthTokensInput"
          },
          "oauthClientInfo": {
            "$ref": "#/components/schemas/OAuthClientInformationInput"
          },
          "oauthServerMetadata": {
            "$ref": "#/components/schemas/AuthorizationServerMetadataInput"
          },
          "oauthResourceMetadata": {
            "$ref": "#/components/schemas/OAuthProtectedResourceMetadataInput"
          },
          "status": {
            "type": "string",
            "enum": ["installing", "oauth_pending", "installed", "failed"]
          },
          "serverType": {
            "type": "string",
            "enum": ["local", "remote"]
          },
          "remote_url": {
            "type": "string"
          },
          "archestra_config": {}
        },
        "required": ["displayName", "serverConfig"]
      },
      "McpServerContainerLogsInput": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "string"
          },
          "containerName": {
            "type": "string"
          }
        },
        "required": ["logs", "containerName"]
      },
      "AvailableToolInput": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Tool ID in format sanitizedServerId__sanitizedToolName",
            "type": "string"
          },
          "name": {
            "description": "Tool name",
            "type": "string"
          },
          "description": {
            "description": "Tool description",
            "type": "string"
          },
          "inputSchema": {
            "description": "Tool input schema"
          },
          "mcpServerId": {
            "description": "MCP server ID",
            "type": "string"
          },
          "mcpServerName": {
            "description": "MCP server name",
            "type": "string"
          },
          "analysis": {
            "description": "Tool analysis results",
            "type": "object",
            "properties": {
              "status": {
                "description": "Analysis status",
                "type": "string",
                "enum": ["awaiting_ollama_model", "in_progress", "error", "completed"]
              },
              "error": {
                "description": "Error message if analysis failed",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "is_read": {
                "description": "Whether the tool is read-only",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "is_write": {
                "description": "Whether the tool writes data",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              }
            },
            "required": ["status", "error", "is_read", "is_write"]
          }
        },
        "required": ["id", "name", "mcpServerId", "mcpServerName", "analysis"]
      },
      "MemoryEntryInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": ["id", "name", "value", "createdAt", "updatedAt"]
      },
      "MemoryListResponseInput": {
        "type": "object",
        "properties": {
          "memories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemoryEntryInput"
            }
          }
        },
        "required": ["memories"]
      },
      "MemoryResponseInput": {
        "type": "object",
        "properties": {
          "memory": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MemoryEntryInput"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          }
        },
        "required": ["memory"]
      },
      "LegacyMemoryResponseInput": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": ["content"]
      },
      "CreateMemoryInput": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name/key for the memory entry",
            "type": "string",
            "minLength": 1
          },
          "value": {
            "description": "Value/content of the memory entry",
            "type": "string"
          }
        },
        "required": ["name", "value"]
      },
      "DeleteResponseInput": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "count": {
            "type": "number"
          }
        },
        "required": ["success"]
      },
      "WriteMemoryInput": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Markdown content to store as memory",
            "type": "string"
          }
        },
        "required": ["content"]
      },
      "OllamaRequiredModelStatusInput": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "installed": {
            "type": "boolean"
          }
        },
        "required": ["model", "reason", "installed"]
      },
      "SandboxActionResponseInput": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["success", "message"]
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "uniqueId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "hasCompletedOnboarding": {
            "type": "boolean"
          },
          "collectTelemetryData": {
            "type": "boolean"
          },
          "collectAnalyticsData": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "uniqueId",
          "hasCompletedOnboarding",
          "collectTelemetryData",
          "collectAnalyticsData",
          "createdAt",
          "updatedAt"
        ]
      },
      "OAuthTokens": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          },
          "expires_in": {
            "type": "number"
          },
          "token_type": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          }
        },
        "required": ["access_token"],
        "additionalProperties": {}
      },
      "OAuthClientInformation": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          }
        },
        "required": ["client_id"],
        "additionalProperties": {}
      },
      "AuthorizationServerMetadata": {
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string"
          },
          "authorization_endpoint": {
            "type": "string"
          },
          "token_endpoint": {
            "type": "string"
          },
          "revocation_endpoint": {
            "type": "string"
          },
          "scopes_supported": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {}
      },
      "OAuthProtectedResourceMetadata": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "string"
          },
          "scopes_supported": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {}
      },
      "OAuthServerConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "server_url": {
            "type": "string",
            "format": "uri"
          },
          "auth_server_url": {
            "type": "string",
            "format": "uri"
          },
          "resource_metadata_url": {
            "type": "string",
            "format": "uri"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "redirect_uris": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "well_known_url": {
            "type": "string",
            "format": "uri"
          },
          "default_scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supports_resource_metadata": {
            "type": "boolean"
          },
          "generic_oauth": {
            "type": "boolean"
          },
          "token_endpoint": {
            "type": "string",
            "format": "uri"
          },
          "access_token_env_var": {
            "type": "string"
          },
          "requires_proxy": {
            "type": "boolean"
          },
          "provider_name": {
            "type": "string"
          },
          "browser_auth": {
            "type": "boolean"
          },
          "streamable_http_url": {
            "type": "string",
            "format": "uri"
          },
          "streamable_http_port": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "server_url",
          "client_id",
          "redirect_uris",
          "scopes",
          "default_scopes",
          "supports_resource_metadata"
        ],
        "additionalProperties": false
      },
      "ToolAnalysisResult": {
        "type": "object",
        "properties": {
          "is_read": {
            "type": "boolean"
          },
          "is_write": {
            "type": "boolean"
          }
        },
        "required": ["is_read", "is_write"],
        "additionalProperties": false
      },
      "Tool": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "mcp_server_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "input_schema": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "array",
                    "items": {}
                  }
                ]
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "is_read": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "is_write": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "analyzed_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "mcp_server_id",
          "name",
          "description",
          "input_schema",
          "is_read",
          "is_write",
          "analyzed_at",
          "created_at",
          "updated_at"
        ],
        "additionalProperties": false
      },
      "SandboxStatusSummary": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["not_installed", "initializing", "running", "error", "stopping", "stopped"]
          },
          "runtime": {
            "type": "object",
            "properties": {
              "startupPercentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "startupMessage": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "startupError": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "machineStartupPercentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "machineStartupMessage": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "machineStartupError": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "pullPercentage": {
                "type": "number",
                "minimum": 0,
                "maximum": 100
              },
              "pullMessage": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "pullError": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              }
            },
            "required": ["startupPercentage", "startupMessage", "startupError"],
            "additionalProperties": false
          },
          "mcpServers": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "container": {
                  "$ref": "#/components/schemas/PodmanContainerStatusSummary"
                },
                "tools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableTool"
                  }
                }
              },
              "required": ["container", "tools"],
              "additionalProperties": false
            }
          },
          "allAvailableTools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AvailableTool"
            }
          }
        },
        "required": ["status", "runtime", "mcpServers"],
        "additionalProperties": false
      },
      "PodmanContainerStatusSummary": {
        "type": "object",
        "properties": {
          "startupPercentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "state": {
            "type": "string",
            "enum": [
              "not_created",
              "created",
              "initializing",
              "running",
              "error",
              "restarting",
              "stopping",
              "stopped",
              "exited"
            ]
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          }
        },
        "required": ["startupPercentage", "state", "message", "error"],
        "additionalProperties": false
      },
      "OllamaModelDownloadProgress": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["downloading", "verifying", "completed", "error"]
          },
          "progress": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["model", "status", "progress", "message"],
        "additionalProperties": false
      },
      "WebSocketMessage": {
        "anyOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["chat-title-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "number"
                  },
                  "title": {
                    "type": "string"
                  }
                },
                "required": ["chatId", "title"],
                "additionalProperties": false
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["chat-tools-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "number"
                  },
                  "selectedTools": {
                    "anyOf": [
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  }
                },
                "required": ["chatId", "selectedTools"],
                "additionalProperties": false
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["sandbox-status-update"]
              },
              "payload": {
                "$ref": "#/components/schemas/SandboxStatusSummary"
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["ollama-model-download-progress"]
              },
              "payload": {
                "$ref": "#/components/schemas/OllamaModelDownloadProgress"
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["memory-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "memories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "createdAt": {
                          "type": "string"
                        },
                        "updatedAt": {
                          "type": "string"
                        }
                      },
                      "required": ["id", "name", "value", "createdAt", "updatedAt"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": ["memories"],
                "additionalProperties": false
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["tools-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "mcpServerId": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": ["mcpServerId", "message"],
                "additionalProperties": false
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["tool-analysis-progress"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "mcpServerId": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["started", "analyzing", "completed", "error"]
                  },
                  "progress": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 100
                  },
                  "totalTools": {
                    "type": "number"
                  },
                  "analyzedTools": {
                    "type": "number"
                  },
                  "currentTool": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "error": {
                    "type": "string"
                  }
                },
                "required": ["status", "message"],
                "additionalProperties": false
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["chat-token-usage-updated"]
              },
              "payload": {
                "type": "object",
                "properties": {
                  "chatId": {
                    "type": "number"
                  },
                  "totalPromptTokens": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "totalCompletionTokens": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "totalTokens": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "lastModel": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "lastContextWindow": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  "contextUsagePercent": {
                    "type": "number"
                  }
                },
                "required": [
                  "chatId",
                  "totalPromptTokens",
                  "totalCompletionTokens",
                  "totalTokens",
                  "lastModel",
                  "lastContextWindow",
                  "contextUsagePercent"
                ],
                "additionalProperties": false
              }
            },
            "required": ["type", "payload"],
            "additionalProperties": false
          }
        ]
      },
      "ChatWithMessages": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "sessionId": {
            "type": "string"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "selectedTools": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "boolean"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  },
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "array",
                    "items": {}
                  }
                ]
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "totalPromptTokens": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "totalCompletionTokens": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "totalTokens": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "lastModel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "lastContextWindow": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "chatId": {
                  "type": "integer",
                  "minimum": -9007199254740991,
                  "maximum": 9007199254740991
                },
                "role": {
                  "type": "string",
                  "enum": ["user", "assistant", "system"]
                },
                "content": {},
                "createdAt": {
                  "type": "string"
                }
              },
              "required": ["id", "chatId", "role", "content", "createdAt"],
              "additionalProperties": false
            }
          }
        },
        "required": [
          "id",
          "sessionId",
          "title",
          "selectedTools",
          "totalPromptTokens",
          "totalCompletionTokens",
          "totalTokens",
          "lastModel",
          "lastContextWindow",
          "createdAt",
          "updatedAt",
          "messages"
        ],
        "additionalProperties": false
      },
      "CloudProviderWithConfig": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SupportedCloudProviders"
          },
          "name": {
            "type": "string"
          },
          "apiKeyUrl": {
            "type": "string",
            "format": "uri"
          },
          "apiKeyPlaceholder": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string",
            "format": "uri"
          },
          "models": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "configured": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "validatedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          }
        },
        "required": [
          "type",
          "name",
          "apiKeyUrl",
          "apiKeyPlaceholder",
          "baseUrl",
          "models",
          "configured",
          "enabled",
          "validatedAt"
        ],
        "additionalProperties": false
      },
      "SupportedCloudProviders": {
        "type": "string",
        "enum": ["anthropic", "openai", "deepseek", "gemini"]
      },
      "SupportedCloudProviderModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "provider": {
            "$ref": "#/components/schemas/SupportedCloudProviders"
          }
        },
        "required": ["id", "provider"],
        "additionalProperties": false
      },
      "ExternalMcpClient": {
        "type": "object",
        "properties": {
          "clientName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": ["clientName", "createdAt"],
        "additionalProperties": false
      },
      "ExternalMcpClientName": {
        "type": "string",
        "enum": ["claude", "cursor", "vscode"]
      },
      "McpRequestLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "requestId": {
            "type": "string"
          },
          "sessionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "mcpSessionId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "serverName": {
            "type": "string"
          },
          "clientInfo": {
            "type": "object",
            "properties": {
              "userAgent": {
                "type": "string"
              },
              "clientName": {
                "type": "string"
              },
              "clientVersion": {
                "type": "string"
              },
              "clientPlatform": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          "method": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "requestHeaders": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              }
            ]
          },
          "requestBody": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "responseBody": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "responseHeaders": {
            "anyOf": [
              {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {}
              }
            ]
          },
          "statusCode": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "errorMessage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "durationMs": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": -9007199254740991,
                "maximum": 9007199254740991
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "requestId",
          "sessionId",
          "mcpSessionId",
          "serverName",
          "clientInfo",
          "method",
          "requestHeaders",
          "requestBody",
          "responseBody",
          "responseHeaders",
          "statusCode",
          "errorMessage",
          "durationMs",
          "timestamp"
        ],
        "additionalProperties": false
      },
      "McpRequestLogStats": {
        "type": "object",
        "properties": {
          "totalRequests": {
            "type": "number"
          },
          "successCount": {
            "type": "number"
          },
          "errorCount": {
            "type": "number"
          },
          "avgDurationMs": {
            "type": "number"
          },
          "requestsPerServer": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        },
        "required": ["totalRequests", "successCount", "errorCount", "avgDurationMs", "requestsPerServer"],
        "additionalProperties": false
      },
      "McpRequestLogFilterStatus": {
        "type": "string",
        "enum": ["HTTP 200", "HTTP 40x", "HTTP 50x"]
      },
      "McpServerConfig": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "inject_file": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "additionalProperties": {}
      },
      "McpServerUserConfigValues": {
        "type": "object",
        "additionalProperties": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            },
            {
              "type": "boolean"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      },
      "McpServer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serverConfig": {
            "$ref": "#/components/schemas/McpServerConfig"
          },
          "userConfigValues": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/McpServerUserConfigValues"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthTokens": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OAuthTokens"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthClientInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OAuthClientInformation"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthServerMetadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AuthorizationServerMetadata"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthResourceMetadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OAuthProtectedResourceMetadata"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "oauthConfig": {
            "anyOf": [
              {},
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "status": {
            "type": "string",
            "enum": ["installing", "oauth_pending", "installed", "failed"]
          },
          "serverType": {
            "type": "string",
            "enum": ["local", "remote"]
          },
          "remoteUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "serverConfig",
          "userConfigValues",
          "oauthTokens",
          "oauthClientInfo",
          "oauthServerMetadata",
          "oauthResourceMetadata",
          "oauthConfig",
          "status",
          "serverType",
          "remoteUrl",
          "createdAt"
        ],
        "additionalProperties": false
      },
      "McpServerInstall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "pattern": "^[A-Za-z0-9-\\s]{1,63}$"
          },
          "serverConfig": {
            "$ref": "#/components/schemas/McpServerConfig"
          },
          "userConfigValues": {
            "$ref": "#/components/schemas/McpServerUserConfigValues"
          },
          "oauthConfig": {
            "$ref": "#/components/schemas/OAuthServerConfig"
          },
          "oauthTokens": {
            "$ref": "#/components/schemas/OAuthTokens"
          },
          "oauthClientInfo": {
            "$ref": "#/components/schemas/OAuthClientInformation"
          },
          "oauthServerMetadata": {
            "$ref": "#/components/schemas/AuthorizationServerMetadata"
          },
          "oauthResourceMetadata": {
            "$ref": "#/components/schemas/OAuthProtectedResourceMetadata"
          },
          "status": {
            "type": "string",
            "enum": ["installing", "oauth_pending", "installed", "failed"]
          },
          "serverType": {
            "type": "string",
            "enum": ["local", "remote"]
          },
          "remote_url": {
            "type": "string"
          },
          "archestra_config": {}
        },
        "required": ["displayName", "serverConfig"],
        "additionalProperties": false
      },
      "McpServerContainerLogs": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "string"
          },
          "containerName": {
            "type": "string"
          }
        },
        "required": ["logs", "containerName"],
        "additionalProperties": false
      },
      "AvailableTool": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Tool ID in format sanitizedServerId__sanitizedToolName",
            "type": "string"
          },
          "name": {
            "description": "Tool name",
            "type": "string"
          },
          "description": {
            "description": "Tool description",
            "type": "string"
          },
          "inputSchema": {
            "description": "Tool input schema"
          },
          "mcpServerId": {
            "description": "MCP server ID",
            "type": "string"
          },
          "mcpServerName": {
            "description": "MCP server name",
            "type": "string"
          },
          "analysis": {
            "description": "Tool analysis results",
            "type": "object",
            "properties": {
              "status": {
                "description": "Analysis status",
                "type": "string",
                "enum": ["awaiting_ollama_model", "in_progress", "error", "completed"]
              },
              "error": {
                "description": "Error message if analysis failed",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "is_read": {
                "description": "Whether the tool is read-only",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              },
              "is_write": {
                "description": "Whether the tool writes data",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "nullable": true,
                    "enum": [null]
                  }
                ]
              }
            },
            "required": ["status", "error", "is_read", "is_write"],
            "additionalProperties": false
          }
        },
        "required": ["id", "name", "mcpServerId", "mcpServerName", "analysis"],
        "additionalProperties": false
      },
      "MemoryEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": ["id", "name", "value", "createdAt", "updatedAt"],
        "additionalProperties": false
      },
      "MemoryListResponse": {
        "type": "object",
        "properties": {
          "memories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemoryEntry"
            }
          }
        },
        "required": ["memories"],
        "additionalProperties": false
      },
      "MemoryResponse": {
        "type": "object",
        "properties": {
          "memory": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MemoryEntry"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          }
        },
        "required": ["memory"],
        "additionalProperties": false
      },
      "LegacyMemoryResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "required": ["content"],
        "additionalProperties": false
      },
      "CreateMemory": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name/key for the memory entry",
            "type": "string",
            "minLength": 1
          },
          "value": {
            "description": "Value/content of the memory entry",
            "type": "string"
          }
        },
        "required": ["name", "value"],
        "additionalProperties": false
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "count": {
            "type": "number"
          }
        },
        "required": ["success"],
        "additionalProperties": false
      },
      "WriteMemory": {
        "type": "object",
        "properties": {
          "content": {
            "description": "Markdown content to store as memory",
            "type": "string"
          }
        },
        "required": ["content"],
        "additionalProperties": false
      },
      "OllamaRequiredModelStatus": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "installed": {
            "type": "boolean"
          }
        },
        "required": ["model", "reason", "installed"],
        "additionalProperties": false
      },
      "SandboxActionResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["success", "message"],
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "minimum": -9007199254740991,
            "maximum": 9007199254740991
          },
          "uniqueId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "enum": [null]
              }
            ]
          },
          "hasCompletedOnboarding": {
            "type": "boolean"
          },
          "collectTelemetryData": {
            "type": "boolean"
          },
          "collectAnalyticsData": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "uniqueId",
          "hasCompletedOnboarding",
          "collectTelemetryData",
          "collectAnalyticsData",
          "createdAt",
          "updatedAt"
        ],
        "additionalProperties": false
      }
    }
  },
  "paths": {
    "/api/oauth/store-code": {
      "post": {
        "operationId": "storeOAuthCode",
        "tags": ["OAuth"],
        "description": "Store OAuth authorization code from deep link callback (internal API)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "state": {
                    "type": "string",
                    "minLength": 1
                  },
                  "code": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": ["state", "code"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/chat": {
      "get": {
        "operationId": "getChats",
        "tags": ["Chat"],
        "description": "Get all chats",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatWithMessages"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "createChat",
        "tags": ["Chat"],
        "description": "Create new chat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatWithMessages"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/{id}": {
      "get": {
        "operationId": "getChatById",
        "tags": ["Chat"],
        "description": "Get single chat with messages",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatWithMessages"
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateChat",
        "tags": ["Chat"],
        "description": "Update chat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "nullable": true,
                        "enum": [null]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatWithMessages"
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteChat",
        "tags": ["Chat"],
        "description": "Delete chat",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Default Response"
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/{id}/tools": {
      "get": {
        "operationId": "getChatSelectedTools",
        "tags": ["Chat"],
        "description": "Get selected tools for a specific chat",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "selectedTools": {
                      "anyOf": [
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        {
                          "nullable": true,
                          "enum": [null]
                        }
                      ]
                    },
                    "availableTools": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AvailableTool"
                      }
                    }
                  },
                  "required": ["selectedTools", "availableTools"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/{id}/tools/select": {
      "post": {
        "operationId": "selectChatTools",
        "tags": ["Chat"],
        "description": "Add tools to chat selection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "toolIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": ["toolIds"]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "selectedTools": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": ["selectedTools"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/{id}/tools/deselect": {
      "post": {
        "operationId": "deselectChatTools",
        "tags": ["Chat"],
        "description": "Remove tools from chat selection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "toolIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": ["toolIds"]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "selectedTools": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": ["selectedTools"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/{id}/tools/select-all": {
      "post": {
        "operationId": "selectAllChatTools",
        "tags": ["Chat"],
        "description": "Select all available tools for this chat",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/{id}/tools/deselect-all": {
      "post": {
        "operationId": "deselectAllChatTools",
        "tags": ["Chat"],
        "description": "Clear all tool selections for this chat",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/{id}/tools/available": {
      "get": {
        "operationId": "getChatAvailableTools",
        "tags": ["Chat"],
        "description": "List all tools available for selection",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableTool"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/message/{id}": {
      "put": {
        "operationId": "updateChatMessage",
        "tags": ["Chat"],
        "description": "Update a specific message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {}
                },
                "required": ["content"]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The content ID (from the ai SDK) of the message to update (not the database pk ID)"
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteChatMessage",
        "tags": ["Chat"],
        "description": "Delete a specific message",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The content ID (from the ai SDK) of the message to update (not the database pk ID)"
          }
        ],
        "responses": {
          "204": {
            "description": "Default Response"
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/cloud-providers/available": {
      "get": {
        "operationId": "getAvailableCloudProviders",
        "tags": ["Cloud Providers"],
        "description": "Get all available cloud providers with configuration status",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudProviderWithConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/cloud-providers": {
      "post": {
        "operationId": "configureCloudProvider",
        "tags": ["Cloud Providers"],
        "description": "Configure a cloud provider with API key",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/SupportedCloudProvidersInput"
                  },
                  "apiKey": {
                    "type": "string"
                  }
                },
                "required": ["type", "apiKey"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/cloud-providers/{type}": {
      "delete": {
        "operationId": "deleteCloudProvider",
        "tags": ["Cloud Providers"],
        "description": "Remove cloud provider configuration",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/SupportedCloudProvidersInput"
            },
            "in": "path",
            "name": "type",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/cloud-providers/models": {
      "get": {
        "operationId": "getCloudProviderModels",
        "tags": ["Cloud Providers"],
        "description": "Get all available models from configured providers",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportedCloudProviderModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/external_mcp_client": {
      "get": {
        "operationId": "getConnectedExternalMcpClients",
        "tags": ["External MCP Client"],
        "description": "Get all connected external MCP clients",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalMcpClient"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/external_mcp_client/supported": {
      "get": {
        "operationId": "getSupportedExternalMcpClients",
        "tags": ["External MCP Client"],
        "description": "Get supported external MCP client names",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalMcpClientName"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/external_mcp_client/connect": {
      "post": {
        "operationId": "connectExternalMcpClient",
        "tags": ["External MCP Client"],
        "description": "Connect an external MCP client",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientName": {
                    "$ref": "#/components/schemas/ExternalMcpClientNameInput"
                  }
                },
                "required": ["clientName"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/external_mcp_client/{clientName}/disconnect": {
      "delete": {
        "operationId": "disconnectExternalMcpClient",
        "tags": ["External MCP Client"],
        "description": "Disconnect an external MCP client",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/ExternalMcpClientNameInput"
            },
            "in": "path",
            "name": "clientName",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_server/start_oauth": {
      "post": {
        "operationId": "startGenericOAuth",
        "tags": ["OAuth"],
        "description": "Start generic OAuth flow for MCP server installation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "installData": {
                    "$ref": "#/components/schemas/McpServerInstallInput"
                  }
                },
                "required": ["installData"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "server": {
                      "$ref": "#/components/schemas/McpServer"
                    },
                    "authUrl": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["server", "authUrl", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_server/complete_oauth": {
      "post": {
        "operationId": "completeGenericOAuth",
        "tags": ["OAuth"],
        "description": "Complete generic OAuth flow with authorization code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  }
                },
                "required": ["code", "state"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "server": {
                      "$ref": "#/components/schemas/McpServer"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["server", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_request_log": {
      "get": {
        "operationId": "getMcpRequestLogs",
        "tags": ["MCP Request Log"],
        "description": "Get MCP request logs with filtering and pagination",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "mcpSessionId",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "serverName",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "method",
            "required": false
          },
          {
            "schema": {
              "$ref": "#/components/schemas/McpRequestLogFilterStatusInput"
            },
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "search",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dateFrom",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dateTo",
            "required": false
          },
          {
            "schema": {
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 9007199254740991
            },
            "in": "query",
            "name": "page",
            "required": false
          },
          {
            "schema": {
              "default": 50,
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            },
            "in": "query",
            "name": "pageSize",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/McpRequestLog"
                      }
                    },
                    "total": {
                      "type": "number"
                    },
                    "page": {
                      "type": "number"
                    },
                    "pageSize": {
                      "type": "number"
                    }
                  },
                  "required": ["data", "total", "page", "pageSize"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "clearMcpRequestLogs",
        "tags": ["MCP Request Log"],
        "description": "Clear MCP request logs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clearAll": {
                    "type": "boolean"
                  }
                },
                "required": ["clearAll"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cleared": {
                      "type": "number"
                    }
                  },
                  "required": ["cleared"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_request_log/{id}": {
      "get": {
        "operationId": "getMcpRequestLogById",
        "tags": ["MCP Request Log"],
        "description": "Get a single MCP request log by ID",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpRequestLog"
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_request_log/stats": {
      "get": {
        "operationId": "getMcpRequestLogStats",
        "tags": ["MCP Request Log"],
        "description": "Get MCP request log statistics",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "mcpSessionId",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "serverName",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "method",
            "required": false
          },
          {
            "schema": {
              "$ref": "#/components/schemas/McpRequestLogFilterStatusInput"
            },
            "in": "query",
            "name": "status",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "search",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dateFrom",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "dateTo",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpRequestLogStats"
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_server": {
      "get": {
        "operationId": "getMcpServers",
        "tags": ["MCP Server"],
        "description": "Get all installed MCP servers",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/McpServer"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_server/install": {
      "post": {
        "operationId": "installMcpServer",
        "tags": ["MCP Server"],
        "description": "Install an MCP server. Either from the catalog, or a customer server",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/McpServerInstallInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpServer"
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_server/{id}": {
      "delete": {
        "operationId": "uninstallMcpServer",
        "tags": ["MCP Server"],
        "description": "Uninstall MCP server",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/mcp_proxy/{id}/logs": {
      "get": {
        "operationId": "getMcpServerLogs",
        "tags": ["MCP Server"],
        "description": "Get logs for a specific MCP server container",
        "parameters": [
          {
            "schema": {
              "default": 100,
              "type": "number"
            },
            "in": "query",
            "name": "lines",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/McpServerContainerLogs"
                }
              }
            }
          },
          "404": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_server/tools": {
      "get": {
        "operationId": "getAvailableTools",
        "tags": ["MCP Server"],
        "description": "Get all available tools from connected MCP servers",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvailableTool"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/mcp_server/oauth_install": {
      "post": {
        "operationId": "installMcpServerWithOauth",
        "tags": ["MCP Server"],
        "description": "Install MCP server with OAuth authentication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "installData": {
                    "$ref": "#/components/schemas/McpServerInstallInput"
                  }
                },
                "required": ["installData"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "server": {
                      "$ref": "#/components/schemas/McpServer"
                    }
                  },
                  "required": ["server"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/memories": {
      "get": {
        "operationId": "getAllMemories",
        "tags": ["Memory"],
        "description": "Get all memory entries for the current user",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryListResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAllMemories",
        "tags": ["Memory"],
        "description": "Delete all memory entries for the current user",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/memories/{name}": {
      "get": {
        "operationId": "getMemoryByName",
        "tags": ["Memory"],
        "description": "Get a specific memory entry by name",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "setMemory",
        "tags": ["Memory"],
        "description": "Create or update a memory entry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string"
                  }
                },
                "required": ["value"]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryEntry"
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["error", "message"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteMemory",
        "tags": ["Memory"],
        "description": "Delete a specific memory entry by name",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/memory": {
      "get": {
        "operationId": "getMemory",
        "tags": ["Memory"],
        "description": "Get the current user memory (legacy format)",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyMemoryResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateMemory",
        "tags": ["Memory"],
        "description": "Update the current user memory (legacy format)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WriteMemoryInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  },
                  "required": ["success"],
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["error", "message"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/ollama/pull": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "description": "The model name to pull",
                    "type": "string"
                  }
                },
                "required": ["model"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": ["success", "message"],
                  "additionalProperties": false
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/ollama/required-models": {
      "get": {
        "operationId": "getOllamaRequiredModelsStatus",
        "tags": ["MCP Server"],
        "description": "Get the status of all Ollama required models",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "models": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OllamaRequiredModelStatus"
                      }
                    }
                  },
                  "required": ["models"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/sandbox/restart": {
      "post": {
        "operationId": "restartSandbox",
        "tags": ["Sandbox"],
        "description": "Restart the Archestra MCP Sandbox (podman machine + all MCP servers)",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxActionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/sandbox/reset": {
      "post": {
        "operationId": "resetSandbox",
        "tags": ["Sandbox"],
        "description": "Clean/purge all data (uninstall all MCP servers + reset podman machine)",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxActionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": ["error"],
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/api/system/backend-logs": {
      "get": {
        "responses": {
          "200": {
            "description": "Default Response"
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "operationId": "getUser",
        "tags": ["User"],
        "description": "Get the current user",
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "updateUser",
        "tags": ["User"],
        "description": "Update user settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "hasCompletedOnboarding": {
                    "type": "boolean"
                  },
                  "collectTelemetryData": {
                    "type": "boolean"
                  },
                  "collectAnalyticsData": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    }
  }
}
