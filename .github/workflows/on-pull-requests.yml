name: On Pull Requests

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
  # You can use the merge_group event to trigger your GitHub Actions workflow when
  # a pull request is added to a merge queue
  # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue#triggering-merge-group-checks-with-github-actions
  merge_group:

concurrency:
  # Cancel any running workflow for the same branch when new commits are pushed.
  # We group both by ref_name (available when CI is triggered by a push to a branch/tag)
  # and head_ref (available when CI is triggered by a PR).
  group: "on-pull-requests-${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  linting-and-tests:
    name: Linting and Tests
    permissions:
      contents: write
      security-events: write
      id-token: write # Required for Workload Identity Federation
    uses: ./.github/workflows/linting-and-tests.yml

  package-and-test-desktop-application:
    name: Package and test desktop application
    uses: ./.github/workflows/build-desktop-application.yml
    permissions:
      # publisher requires write permissions to the repo's contents to create new releases
      # https://www.electronforge.io/config/publishers/github#authentication
      contents: write
    with:
      dry_run: true
      run_tests: true
    secrets:
      ARCHESTRA_RELEASER_GITHUB_APP_ID: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_ID }}
      ARCHESTRA_RELEASER_GITHUB_APP_PRIVATE_KEY: ${{ secrets.ARCHESTRA_RELEASER_GITHUB_APP_PRIVATE_KEY }}
      APPLE_SIGNING_CERTIFICATE_BASE64: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
      APPLE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
